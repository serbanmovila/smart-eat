[{"/Users/serban.movila/Desktop/FoodRecipes/frontend/src/index.js":"1","/Users/serban.movila/Desktop/FoodRecipes/frontend/src/App.js":"2","/Users/serban.movila/Desktop/FoodRecipes/frontend/src/Reducer.js":"3","/Users/serban.movila/Desktop/FoodRecipes/frontend/src/Screens/AppNavigator/AppNavigator.js":"4","/Users/serban.movila/Desktop/FoodRecipes/frontend/src/Screens/Auth/Controllers/AuthActions.js":"5","/Users/serban.movila/Desktop/FoodRecipes/frontend/src/Screens/Dashboard/Ingredients/Controllers/IngredientsActions.js":"6","/Users/serban.movila/Desktop/FoodRecipes/frontend/src/Screens/Auth/AuthScreen.js":"7","/Users/serban.movila/Desktop/FoodRecipes/frontend/src/Screens/Dashboard/Dashboard.js":"8","/Users/serban.movila/Desktop/FoodRecipes/frontend/src/Helpers/Modal/Modal.js":"9","/Users/serban.movila/Desktop/FoodRecipes/frontend/src/Screens/Dashboard/Ingredients/IngredientsScreen.js":"10","/Users/serban.movila/Desktop/FoodRecipes/frontend/src/Screens/Dashboard/Recommendations/RecommendationsScreen.js":"11","/Users/serban.movila/Desktop/FoodRecipes/frontend/src/Helpers/Navigation/Navigation.js":"12","/Users/serban.movila/Desktop/FoodRecipes/frontend/src/Screens/Dashboard/Recipes/RecipesScreen.js":"13","/Users/serban.movila/Desktop/FoodRecipes/frontend/src/Helpers/Constants.js":"14","/Users/serban.movila/Desktop/FoodRecipes/frontend/src/Helpers/Header/Header.js":"15","/Users/serban.movila/Desktop/FoodRecipes/frontend/src/Screens/Dashboard/CommonStyledComponents.js":"16","/Users/serban.movila/Desktop/FoodRecipes/frontend/src/Screens/Dashboard/Ingredients/Components/AddIngredientForm.js":"17","/Users/serban.movila/Desktop/FoodRecipes/frontend/src/Screens/Dashboard/Ingredients/Components/TableHeader.js":"18","/Users/serban.movila/Desktop/FoodRecipes/frontend/src/Screens/Dashboard/Ingredients/Components/Ingredient.js":"19","/Users/serban.movila/Desktop/FoodRecipes/frontend/src/Screens/Dashboard/Recipes/Controllers/RecipeActions.js":"20","/Users/serban.movila/Desktop/FoodRecipes/frontend/src/Screens/Dashboard/Recipes/Components/Recipe.js":"21","/Users/serban.movila/Desktop/FoodRecipes/frontend/src/Screens/Dashboard/Recipes/Components/AddRecipeForm.js":"22","/Users/serban.movila/Desktop/FoodRecipes/frontend/src/Screens/Dashboard/Recommendations/Components/PickMeal.js":"23","/Users/serban.movila/Desktop/FoodRecipes/frontend/src/Screens/Dashboard/Recommendations/Components/PickRecipes.js":"24","/Users/serban.movila/Desktop/FoodRecipes/frontend/src/Screens/Dashboard/Recommendations/Components/ScoreRecipes.js":"25"},{"size":899,"mtime":1635591432256,"results":"26","hashOfConfig":"27"},{"size":1159,"mtime":1635591432236,"results":"28","hashOfConfig":"27"},{"size":1087,"mtime":1635591432237,"results":"29","hashOfConfig":"27"},{"size":702,"mtime":1635591432238,"results":"30","hashOfConfig":"27"},{"size":1289,"mtime":1635591432239,"results":"31","hashOfConfig":"27"},{"size":1299,"mtime":1635591432241,"results":"32","hashOfConfig":"27"},{"size":13449,"mtime":1635591432239,"results":"33","hashOfConfig":"27"},{"size":1574,"mtime":1635591432240,"results":"34","hashOfConfig":"27"},{"size":394,"mtime":1635591432237,"results":"35","hashOfConfig":"27"},{"size":4323,"mtime":1635591432241,"results":"36","hashOfConfig":"27"},{"size":6104,"mtime":1635591432244,"results":"37","hashOfConfig":"27"},{"size":6476,"mtime":1635591432237,"results":"38","hashOfConfig":"27"},{"size":3520,"mtime":1635591432242,"results":"39","hashOfConfig":"27"},{"size":62,"mtime":1635591432236,"results":"40","hashOfConfig":"27"},{"size":2732,"mtime":1635591432236,"results":"41","hashOfConfig":"27"},{"size":1344,"mtime":1635591432239,"results":"42","hashOfConfig":"27"},{"size":3385,"mtime":1635591432240,"results":"43","hashOfConfig":"27"},{"size":689,"mtime":1635591432240,"results":"44","hashOfConfig":"27"},{"size":2320,"mtime":1635591432240,"results":"45","hashOfConfig":"27"},{"size":1229,"mtime":1635591432242,"results":"46","hashOfConfig":"27"},{"size":2411,"mtime":1635591432242,"results":"47","hashOfConfig":"27"},{"size":13546,"mtime":1636457024622,"results":"48","hashOfConfig":"27"},{"size":1581,"mtime":1636456962339,"results":"49","hashOfConfig":"27"},{"size":2081,"mtime":1635591432243,"results":"50","hashOfConfig":"27"},{"size":1826,"mtime":1635591432243,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"1ik0k8s",{"filePath":"55","messages":"56","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"54"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"54"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"54"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"54"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"54"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"54"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"54"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"54"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"/Users/serban.movila/Desktop/FoodRecipes/frontend/src/index.js",[],["116","117"],"/Users/serban.movila/Desktop/FoodRecipes/frontend/src/App.js",["118","119","120"],"import './App.css'\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'\nimport AppNavigator from './Screens/AppNavigator/AppNavigator'\nimport React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { checkLogin } from './Screens/Auth/Controllers/AuthActions'\n\nfunction App(props) {\n    useEffect(() => {\n        props.checkLogin()\n    }, [])\n\n    return (\n        <Router>\n            <div className=\"App\">\n                <Switch>\n                    <Route path=\"/ingredients\">\n                        <AppNavigator screen=\"ingredients\" />\n                    </Route>\n                    <Route path=\"/recipes\">\n                        <AppNavigator screen=\"recipes\" />\n                    </Route>\n                    <Route path=\"/recommendations\">\n                        <AppNavigator screen=\"recommendations\" />\n                    </Route>\n                    <Route path=\"/\">\n                        <AppNavigator />\n                    </Route>\n                </Switch>\n            </div>\n        </Router>\n    )\n}\n\nexport default connect((state) => ({ ...state }), { checkLogin })(App)\n","/Users/serban.movila/Desktop/FoodRecipes/frontend/src/Reducer.js",["121","122"],"import { CallToActionRounded } from '@material-ui/icons'\nimport { getIngredients } from './Screens/Dashboard/Ingredients/Controllers/IngredientsActions'\n\nconst INITIAL_STATE = {\n    loggedIn: false,\n    ingredients: [],\n    recipes: [],\n    username: ''\n}\n\nconst Reducer = function (state = INITIAL_STATE, action) {\n    switch (action.type) {\n        case 'GET_INGREDIENTS':\n            return { ...state, ingredients: action.ingredients }\n        case 'GET_RECIPES':\n            return { ...state, recipes: action.payload }\n        case 'LOGGED_IN':\n            sessionStorage.setItem('token', action.token)\n            return {\n                ...state,\n                loggedIn: true,\n                jwt: action.token,\n                ingredients: [],\n                recipes: []\n            }\n        case 'IS_LOGGED':\n            return {\n                ...state,\n                loggedIn: true,\n                jwt: action.token,\n                ingredients: [],\n                recipes: []\n            }\n        default:\n            return state\n    }\n}\n\nexport default Reducer\n","/Users/serban.movila/Desktop/FoodRecipes/frontend/src/Screens/AppNavigator/AppNavigator.js",["123"],"import React from 'react'\nimport { connect } from 'react-redux'\nimport AuthScreen from '../Auth/AuthScreen'\nimport Dashboard from './../Dashboard/Dashboard'\nimport { checkLogin } from './../Auth/Controllers/AuthActions'\n\nclass AppNavigator extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {}\n    }\n\n    render() {\n        const { screen, loggedIn } = this.props\n\n        if (loggedIn) {\n            return (\n                <Dashboard\n                    screen={screen === undefined ? 'ingredients' : screen}\n                />\n            )\n        } else return <AuthScreen />\n    }\n}\n\nexport default connect((state) => ({ ...state }), {})(AppNavigator)\n","/Users/serban.movila/Desktop/FoodRecipes/frontend/src/Screens/Auth/Controllers/AuthActions.js",[],"/Users/serban.movila/Desktop/FoodRecipes/frontend/src/Screens/Dashboard/Ingredients/Controllers/IngredientsActions.js",[],"/Users/serban.movila/Desktop/FoodRecipes/frontend/src/Screens/Auth/AuthScreen.js",["124","125","126"],"import React from 'react'\nimport Header from './../../Helpers/Header/Header'\nimport styled from 'styled-components'\nimport bg from './../../assets/images/lp-bg.jpg'\nimport { constants as c } from './../../Helpers/Constants'\nimport { Kitchen, MenuBook, Fastfood } from '@material-ui/icons'\nimport { Button, TextField } from '@material-ui/core'\nimport Modal from './../../Helpers/Modal/Modal'\nimport { login, register } from './Controllers/AuthActions'\nimport { connect } from 'react-redux'\n\nconst Container = styled.div`\n    width: 100%;\n    height: 100vh;\n    position: relative;\n    background: url(${bg});\n    background-repeat: no-repeat;\n    background-size: cover;\n    background-position: center;\n`\n\nconst InnerContainer = styled.div`\n    width: 100%;\n    height: 100%;\n    background: rgba(0, 0, 0, 0.5);\n    padding-top: ${c.navHeight}px;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n`\n\nconst ContentContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n`\n\nconst Content = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    width: 100%;\n\n    & > div:not(:first-child) {\n        border-left: 1px solid rgba(255, 255, 255, 0.7);\n    }\n`\n\nconst Box = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    width: 33.3%;\n\n    h3 {\n        color: white;\n        font-family: 'Source Sans Pro', sans-serif;\n        font-weight: 500;\n        font-size: 1.6vw;\n        max-width: 250px;\n    }\n\n    svg {\n        color: white;\n        width: 50px;\n        height: auto;\n    }\n`\n\nconst Tabs = styled.div`\n    display: flex;\n    justify-content: space-between;\n    background: #eee;\n    border-top: 1px solid rgba(0, 0, 0, 0.3);\n    border-bottom: 1px solid rgba(0, 0, 0, 0.3);\n`\n\nconst Tab = styled.div`\n    width: 50%;\n    cursor: pointer;\n    transition: background 0.2s ease-in-out;\n\n    p {\n        font-family: 'Source Sans Pro', sans-serif;\n        text-align: center;\n    }\n\n    &.selected,\n    &:hover {\n        background: rgba(0, 0, 0, 0.1);\n    }\n`\n\nconst Form = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding: 20px 40px;\n\n    & > div {\n        margin: 10px auto;\n    }\n`\n\nconst InnerModal = styled.div`\n    background: white;\n    border-radius: 4px;\n`\n\nclass AuthScreen extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            modal: false,\n            formType: 'login',\n            password: '',\n            email: '',\n            confirmPassword: '',\n            validCPW: true,\n            validPW: true,\n            validMail: true\n        }\n    }\n\n    close = () => {\n        this.setState({ modal: false })\n    }\n\n    open = (type) => {\n        this.setState({ modal: true, formType: type })\n    }\n\n    switchTab = () => {\n        this.setState({\n            formType: this.state.formType === 'login' ? 'signup' : 'login'\n        })\n    }\n\n    validatePasswords = () => {\n        if (this.state.formType === 'signup') {\n            this.setState({\n                validCPW: this.state.password === this.state.confirmPassword,\n                validPW: this.state.password === this.state.confirmPassword\n            })\n        } else\n            this.setState({\n                validCPW: true,\n                validPW: true\n            })\n    }\n\n    updateValue = (type, content) => {\n        switch (type) {\n            case 'pw':\n                {\n                    this.setState(\n                        {\n                            password: content\n                        },\n                        this.validatePasswords\n                    )\n                }\n                break\n            case 'cpw':\n                {\n                    this.setState(\n                        {\n                            confirmPassword: content\n                        },\n                        this.validatePasswords\n                    )\n                }\n                break\n            case 'email': {\n                this.setState({\n                    email: content\n                })\n            }\n        }\n    }\n\n    signUp = () => {\n        if (this.state.validCPW && this.state.validPW && this.state.validMail) {\n            this.props.register(\n                {\n                    username: this.state.email,\n                    password: this.state.password,\n                    email: this.state.email\n                },\n                this.props.login\n            )\n        }\n    }\n\n    signIn = () => {\n        if (this.state.validPW && this.state.validMail) {\n            this.props.login({\n                username: this.state.email,\n                password: this.state.password\n            })\n        }\n    }\n\n    render() {\n        const { close, open } = this\n        return (\n            <>\n                <Header openModal={open} />\n                <Container>\n                    <InnerContainer>\n                        <Modal close={close} open={this.state.modal}>\n                            <InnerModal>\n                                <Tabs>\n                                    <Tab\n                                        style={{\n                                            borderRight:\n                                                '1px solid rgba(0,0,0,0.3)'\n                                        }}\n                                        className={\n                                            this.state.formType === 'login'\n                                                ? 'selected'\n                                                : ''\n                                        }\n                                        onClick={this.switchTab}\n                                    >\n                                        <p>Log in</p>\n                                    </Tab>\n                                    <Tab\n                                        onClick={this.switchTab}\n                                        className={\n                                            this.state.formType === 'signup'\n                                                ? 'selected'\n                                                : ''\n                                        }\n                                    >\n                                        <p>Sign up</p>\n                                    </Tab>\n                                </Tabs>\n                                <Form>\n                                    {this.state.formType === 'login' ? (\n                                        <>\n                                            <TextField\n                                                id=\"outlined-basic\"\n                                                label=\"Email\"\n                                                variant=\"outlined\"\n                                                onChange={(e) => {\n                                                    this.updateValue(\n                                                        'email',\n                                                        e.target.value\n                                                    )\n                                                }}\n                                            />\n                                            <TextField\n                                                id=\"outlined-basic\"\n                                                label=\"Password\"\n                                                type=\"password\"\n                                                variant=\"outlined\"\n                                                onChange={(e) => {\n                                                    this.updateValue(\n                                                        'pw',\n                                                        e.target.value\n                                                    )\n                                                }}\n                                            />\n                                            <Button\n                                                variant=\"outlined\"\n                                                size=\"large\"\n                                                onClick={this.signIn}\n                                                style={{\n                                                    width: '100%',\n                                                    marginTop: '30px'\n                                                }}\n                                            >\n                                                Log in\n                                            </Button>\n                                        </>\n                                    ) : (\n                                        <>\n                                            <TextField\n                                                id=\"outlined-basic\"\n                                                label=\"Email\"\n                                                variant=\"outlined\"\n                                                onChange={(e) => {\n                                                    this.updateValue(\n                                                        'email',\n                                                        e.target.value\n                                                    )\n                                                }}\n                                            />\n                                            <TextField\n                                                id=\"outlined-basic\"\n                                                label=\"Password\"\n                                                variant=\"outlined\"\n                                                type=\"password\"\n                                                onChange={(e) => {\n                                                    this.updateValue(\n                                                        'pw',\n                                                        e.target.value\n                                                    )\n                                                }}\n                                            />\n                                            <TextField\n                                                id=\"outlined-basic\"\n                                                label=\"Confirm password\"\n                                                variant=\"outlined\"\n                                                type=\"password\"\n                                                onChange={(e) => {\n                                                    this.updateValue(\n                                                        'cpw',\n                                                        e.target.value\n                                                    )\n                                                }}\n                                            />\n                                            <Button\n                                                variant=\"outlined\"\n                                                size=\"large\"\n                                                style={{\n                                                    width: '100%',\n                                                    marginTop: '30px'\n                                                }}\n                                                onClick={this.signUp}\n                                            >\n                                                Sign up\n                                            </Button>\n                                        </>\n                                    )}\n                                </Form>\n                            </InnerModal>\n                        </Modal>\n                        <ContentContainer>\n                            <Content>\n                                <Box>\n                                    <Kitchen />\n                                    <h3>Keep track of your ingredients</h3>\n                                </Box>\n                                <Box>\n                                    <MenuBook />\n                                    <h3>Keep track of your recipes</h3>\n                                </Box>\n                                <Box>\n                                    <Fastfood />\n                                    <h3>\n                                        Get recipe recommendations based on what\n                                        you like\n                                    </h3>\n                                </Box>\n                            </Content>\n                        </ContentContainer>\n                        <Button\n                            variant=\"contained\"\n                            style={{\n                                color: 'black',\n                                marginTop: '7%'\n                            }}\n                            size=\"large\"\n                            onClick={() => {\n                                open('login')\n                            }}\n                        >\n                            Sign up\n                        </Button>\n                    </InnerContainer>\n                </Container>\n            </>\n        )\n    }\n}\n\nexport default connect((state) => ({ ...state }), { login, register })(\n    AuthScreen\n)\n","/Users/serban.movila/Desktop/FoodRecipes/frontend/src/Screens/Dashboard/Dashboard.js",[],"/Users/serban.movila/Desktop/FoodRecipes/frontend/src/Helpers/Modal/Modal.js",[],"/Users/serban.movila/Desktop/FoodRecipes/frontend/src/Screens/Dashboard/Ingredients/IngredientsScreen.js",["127"],"import React from 'react'\nimport styled from 'styled-components'\nimport Ingredient from './Components/Ingredient'\nimport TableHeader from './Components/TableHeader'\nimport { Button } from '@material-ui/core'\nimport Modal from '../../../Helpers/Modal/Modal'\nimport AddCircleIcon from '@material-ui/icons/AddCircle'\nimport { Container, Header, HeaderContent } from '../CommonStyledComponents'\nimport AddIngredientForm from './Components/AddIngredientForm'\nimport { connect } from 'react-redux'\nimport {\n    getIngredients,\n    deleteIngredient,\n    updateIngredient\n} from './Controllers/IngredientsActions'\n\nconst IngredientsList = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    max-height: 100%;\n    overflow: auto;\n    /* width */\n    &::-webkit-scrollbar {\n        width: 6px;\n    }\n\n    /* Track */\n    &::-webkit-scrollbar-track {\n        background: transparent;\n    }\n\n    /* Handle */\n    &::-webkit-scrollbar-thumb {\n        background: rgba(0, 0, 0, 0.3);\n        border-radius: 8px;\n    }\n\n    /* Handle on hover */\n    &::-webkit-scrollbar-thumb:hover {\n        background: rgba(0, 0, 0, 0.5);\n    }\n`\n\nconst TableContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    background: white;\n    border-radius: 8px;\n    -webkit-box-shadow: 2px 2px 30px 0px rgba(0, 0, 0, 0.1);\n    -moz-box-shadow: 2px 2px 30px 0px rgba(0, 0, 0, 0.1);\n    box-shadow: 2px 2px 30px 0px rgba(0, 0, 0, 0.1);\n    height: 80%;\n\n    @media only screen and (max-width: 600px) {\n        width: 100%;\n        height: auto;\n        margin-top: 6%;\n    }\n`\n\nclass IngredientsScreen extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            openModal: false,\n            preloaded: false\n        }\n    }\n\n    close = () => {\n        this.setState({\n            openModal: false,\n            preloaded: false\n        })\n    }\n\n    open = () => {\n        this.setState({\n            openModal: true\n        })\n    }\n\n    openIngredient = (data) => {\n        this.setState(\n            {\n                preloaded: true,\n                data: data\n            },\n            () => {\n                this.setState({\n                    openModal: true\n                })\n            }\n        )\n    }\n\n    deleteIngredient = (id) => {\n        this.props.deleteIngredient(id, this.props.getIngredients)\n    }\n\n    componentDidMount() {\n        this.props.getIngredients()\n    }\n\n    render() {\n        const { ingredients } = this.props\n        return (\n            <>\n                <Container>\n                    <Header>\n                        <HeaderContent>\n                            <h3>Ingredients</h3>\n                            <p>\n                                View, add, edit and remove ingredients of all\n                                kinds.\n                            </p>\n                        </HeaderContent>\n                        <Button endIcon={<AddCircleIcon />} onClick={this.open}>\n                            New Ingredient\n                        </Button>\n                    </Header>\n                    <TableContainer>\n                        <TableHeader />\n                        <IngredientsList>\n                            {ingredients.map((ingredient) => {\n                                return (\n                                    <Ingredient\n                                        data={ingredient}\n                                        deleteIngredient={this.deleteIngredient}\n                                        editIngredient={this.openIngredient}\n                                    />\n                                )\n                            })}\n                        </IngredientsList>\n                    </TableContainer>\n                </Container>\n                <Modal close={this.close} open={this.state.openModal}>\n                    <AddIngredientForm\n                        close={this.close}\n                        preloaded={this.state.preloaded}\n                        data={this.state.data}\n                    />\n                </Modal>\n            </>\n        )\n    }\n}\n\nexport default connect(\n    (state) => ({\n        ingredients: state.ingredients,\n        token: state.token\n    }),\n    { getIngredients, deleteIngredient }\n)(IngredientsScreen)\n","/Users/serban.movila/Desktop/FoodRecipes/frontend/src/Screens/Dashboard/Recommendations/RecommendationsScreen.js",[],"/Users/serban.movila/Desktop/FoodRecipes/frontend/src/Helpers/Navigation/Navigation.js",["128"],"import React from 'react'\nimport styled from 'styled-components'\nimport { Menu } from '@material-ui/icons'\nimport { Button, IconButton } from '@material-ui/core/'\nimport img1 from '../../assets/images/1.jpg'\nimport img2 from '../../assets/images/2.jpg'\nimport img3 from '../../assets/images/3.jpg'\nimport img4 from '../../assets/images/4.jpg'\nimport img5 from '../../assets/images/5.jpg'\nimport img6 from '../../assets/images/6.jpg'\nimport img7 from '../../assets/images/7.jpg'\n\nconst NavContainer = styled.div`\n    max-width: 300px;\n    min-width: 250px;\n    width: 20%;\n    height: 100vh;\n    align-items: center;\n    background: white;\n    -webkit-box-shadow: -3px -1px 6px 0px rgba(0, 0, 0, 0.75);\n    -moz-box-shadow: -3px -1px 6px 0px rgba(0, 0, 0, 0.75);\n    box-shadow: -3px -1px 6px 0px rgba(0, 0, 0, 0.75);\n    z-index: 3;\n    background-size: cover;\n    background-position: center;\n\n    @media (max-width: 600px) {\n        height: 100%;\n        position: fixed;\n        width: 250px;\n        top: 0;\n        transition: left 0.2s ease-in-out;\n    }\n`\n\nconst NavBgOverlay = styled.div`\n    height: 100%;\n    width: 100%;\n    background: rgb(55, 59, 96, 0.76);\n    display: flex;\n    flex-direction: column;\n`\n\nconst Nav = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n\n    @media (max-width: 600px) {\n        height: 100%;\n        width: 250px;\n        top: 0;\n        left: -250px;\n        transition: left 0.2s ease-in-out;\n    }\n`\n\nconst List = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n\n    button {\n        border-radius: 0px;\n        padding: 4% 0;\n        color: rgba(255, 255, 255, 0.9);\n        text-transform: none;\n        letter-spacing: 1px;\n\n        span {\n            text-align: left;\n            padding-left: 10%;\n            display: flex;\n            justify-content: flex-start;\n        }\n\n        :not(:first-child) {\n            border-top: 1px solid rgba(0, 0, 0, 0.2);\n        }\n\n        &.active {\n            background: rgba(0, 0, 0, 0.3);\n        }\n    }\n`\n\nconst NavHeader = styled.div`\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n\n    @media (max-width: 600px) {\n        display: none;\n    }\n`\n\nconst MobileNavHeader = styled.div`\n    display: none;\n\n    @media (max-width: 600px) {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 5px 20px;\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100vw;\n        background-color: #efeff7;\n        box-shadow: 0 0 0 0.4px rgb(55, 59, 96);\n    }\n`\n\nconst Logo = styled.h1`\n    font-family: 'Libre Baskerville', serif;\n    font-style: italic;\n    color: white;\n    font-size: 130%;\n    letter-spacing: 2px;\n    cursor: pointer;\n    transition: opacity 0.3s ease-in-out;\n    margin-left: 10%;\n\n    @media (max-width: 600px) {\n        color: rgba(0, 0, 0, 0.8);\n        margin: auto 0;\n    }\n`\n\nconst MenuBtn = styled.span`\n    cursor: pointer;\n`\n\nconst Mask = styled.div`\n    background-color: rgba(0, 0, 0, 0.5);\n    position: fixed;\n    width: 100vw;\n    height: 100vh;\n    z-index: 2;\n`\n\nexport default class Navigation extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            mobileNavState: '-250px'\n        }\n    }\n\n    switchNav = () => {\n        if (this.state.mobileNavState === '-250px') {\n            this.setState({\n                mobileNavState: '0px'\n            })\n        } else {\n            this.setState({\n                mobileNavState: '-250px'\n            })\n        }\n    }\n\n    render() {\n        const { screen } = this.props\n\n        let bg,\n            bgs = [img1, img2, img3, img4, img5, img6, img7]\n\n        bg = bgs[Math.floor(Math.random() * 7)]\n\n        return (\n            <>\n                {this.state.mobileNavState === '0px' && (\n                    <Mask onClick={this.switchNav} />\n                )}\n                <MobileNavHeader>\n                    <Logo>FoodRecipes</Logo>\n                    <IconButton onClick={this.switchNav}>\n                        <Menu />\n                    </IconButton>\n                </MobileNavHeader>\n                <NavContainer\n                    style={{\n                        backgroundImage: `url(${bg})`,\n                        left: this.state.mobileNavState\n                    }}\n                >\n                    <NavBgOverlay>\n                        <NavHeader>\n                            <Logo>FoodRecipes</Logo>\n                        </NavHeader>\n                        <Nav>\n                            <List>\n                                <Button\n                                    className={\n                                        screen === 'ingredients' ? 'active' : ''\n                                    }\n                                    onClick={() =>\n                                        this.props.switchScreen('ingredients')\n                                    }\n                                >\n                                    Ingredients\n                                </Button>\n                                <Button\n                                    className={\n                                        screen === 'recipes' ? 'active' : ''\n                                    }\n                                    onClick={() =>\n                                        this.props.switchScreen('recipes')\n                                    }\n                                >\n                                    Recipes\n                                </Button>\n                                <Button\n                                    className={\n                                        screen === 'recommendations'\n                                            ? 'active'\n                                            : ''\n                                    }\n                                    onClick={() =>\n                                        this.props.switchScreen(\n                                            'recommendations'\n                                        )\n                                    }\n                                >\n                                    Get recommendation\n                                </Button>\n                            </List>\n                        </Nav>\n                    </NavBgOverlay>\n                </NavContainer>\n            </>\n        )\n    }\n}\n","/Users/serban.movila/Desktop/FoodRecipes/frontend/src/Screens/Dashboard/Recipes/RecipesScreen.js",["129","130"],"import React from 'react'\nimport { Button } from '@material-ui/core'\nimport AddCircleIcon from '@material-ui/icons/AddCircle'\nimport { Container, Header, HeaderContent } from '../CommonStyledComponents'\nimport styled from 'styled-components'\nimport { connect } from 'react-redux'\nimport Recipe from './Components/Recipe'\nimport Modal from '../../../Helpers/Modal/Modal'\nimport AddRecipeForm from './Components/AddRecipeForm'\nimport { getRecipes } from './Controllers/RecipeActions'\nimport { FormatListNumberedRtlRounded, ThreeSixty } from '@material-ui/icons'\n\nconst RecipesListing = styled.div`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    max-height: 80%;\n    width: 100%;\n    overflow: auto;\n    align-self: flex-end;\n    /* width */\n    &::-webkit-scrollbar {\n        width: 6px;\n    }\n\n    /* Track */\n    &::-webkit-scrollbar-track {\n        background: transparent;\n    }\n\n    /* Handle */\n    &::-webkit-scrollbar-thumb {\n        background: rgba(0, 0, 0, 0.3);\n        border-radius: 8px;\n    }\n\n    /* Handle on hover */\n    &::-webkit-scrollbar-thumb:hover {\n        background: rgba(0, 0, 0, 0.5);\n    }\n`\n\nclass RecipesScreen extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            openModal: false,\n            recipeData: {},\n            preloaded: false\n        }\n    }\n\n    componentDidMount() {\n        this.props.getRecipes()\n    }\n\n    close = () => {\n        this.setState({\n            preloaded: false,\n            openModal: false\n        })\n    }\n\n    open = () => {\n        this.setState({\n            openModal: true\n        })\n    }\n\n    viewRecipe = (data) => {\n        this.setState(\n            {\n                preloaded: true,\n                recipeData: data\n            },\n            () => {\n                this.setState({\n                    openModal: true\n                })\n            }\n        )\n    }\n\n    render() {\n        const recipes = this.props.recipes\n        return (\n            <>\n                <Container>\n                    <Header>\n                        <HeaderContent>\n                            <h3>Recipes</h3>\n                            <p>\n                                View, add, edit and remove recipes of all kinds.\n                            </p>\n                        </HeaderContent>\n                        <Button endIcon={<AddCircleIcon />} onClick={this.open}>\n                            New Recipe\n                        </Button>\n                    </Header>\n                    <RecipesListing>\n                        {recipes.map((recipe) => {\n                            return (\n                                <Recipe\n                                    handleClick={() => {\n                                        this.viewRecipe(recipe)\n                                    }}\n                                    data={recipe}\n                                />\n                            )\n                        })}\n                    </RecipesListing>\n                </Container>\n                <Modal close={this.close} open={this.state.openModal}>\n                    <AddRecipeForm\n                        close={this.close}\n                        preloaded={this.state.preloaded}\n                        data={this.state.recipeData}\n                    />\n                </Modal>\n            </>\n        )\n    }\n}\n\nexport default connect(\n    (state) => ({\n        recipes: state.recipes\n    }),\n    { getRecipes }\n)(RecipesScreen)\n","/Users/serban.movila/Desktop/FoodRecipes/frontend/src/Helpers/Constants.js",[],"/Users/serban.movila/Desktop/FoodRecipes/frontend/src/Helpers/Header/Header.js",["131","132","133","134","135"],"import React from 'react'\nimport styled from 'styled-components'\nimport { Link } from 'react-router-dom'\nimport { constants as c } from '../Constants'\n\nconst Nav = styled.nav`\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    position: fixed;\n    width: 100%;\n    left: 0;\n    height: ${c.navHeight}px;\n    top: 0;\n    z-index: 2;\n`\n\nconst List = styled.ul`\n    display: flex;\n    flex-direction: row;\n`\n\nconst Element = styled.li`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    a {\n        text-decoration: none;\n        font-weight: 500;\n        height: 100%;\n        letter-spacing: 1px;\n        margin: 0 10px;\n        color: white;\n        position: relative;\n        opacity: 0.8;\n        font-family: 'Source Sans Pro', sans-serif;\n        transition: opacity 0.3s ease-in-out;\n\n        &::after {\n            content: '';\n            height: 2px;\n            background: white;\n            display: block;\n            width: 0;\n            position: absolute;\n            left: 0;\n            top: 120%;\n            transition: width 0.4s ease-in-out;\n        }\n\n        &:hover {\n            opacity: 1;\n            transition: opacity 0.3s ease-in-out;\n\n            &::after {\n                width: 100%;\n            }\n        }\n    }\n`\n\nconst Logo = styled.h1`\n    font-family: 'Libre Baskerville', serif;\n    font-style: italic;\n    color: white;\n    letter-spacing: 2px;\n    opacity: 0.8;\n    cursor: pointer;\n    transition: opacity 0.3s ease-in-out;\n\n    &:hover {\n        opacity: 1;\n    }\n`\n\nconst NavInner = styled.div`\n    width: 90%;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: flex-start;\n    border-bottom: 1px solid rgba(255, 255, 255, 0.2);\n`\n\nexport default function Header(props) {\n    return (\n        <Nav>\n            <NavInner>\n                <Logo>FoodRecipes</Logo>\n                <List>\n                    <Element>\n                        <a\n                            href=\"javascript:void(0)\"\n                            onClick={() => {\n                                props.openModal('login')\n                            }}\n                        >\n                            Login\n                        </a>\n                    </Element>\n                    <Element>\n                        <a\n                            href=\"javascript:void(0)\"\n                            onClick={() => {\n                                props.openModal('register')\n                            }}\n                        >\n                            Register\n                        </a>\n                    </Element>\n                </List>\n            </NavInner>\n        </Nav>\n    )\n}\n","/Users/serban.movila/Desktop/FoodRecipes/frontend/src/Screens/Dashboard/CommonStyledComponents.js",[],"/Users/serban.movila/Desktop/FoodRecipes/frontend/src/Screens/Dashboard/Ingredients/Components/AddIngredientForm.js",["136","137","138","139","140"],"import React from 'react'\nimport {\n    InputLabel,\n    Select,\n    MenuItem,\n    FormControl,\n    TextField,\n    Button\n} from '@material-ui/core'\nimport {\n    addIngredient,\n    getIngredients,\n    updateIngredient\n} from '../Controllers/IngredientsActions'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\n\nconst FormContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 300px;\n    min-width: 300px;\n    padding: 30px 20px;\n    background: white;\n    border-radius: 4px;\n`\n\nclass AddIngredientForm extends React.Component {\n    constructor(props) {\n        super(props)\n        if (props.preloaded) {\n            this.state = {\n                unitType: '',\n                id: props.data.id,\n                name: props.data.name,\n                qty: props.data.qty\n            }\n        } else\n            this.state = {\n                unitType: '',\n                name: '',\n                qty: 0\n            }\n    }\n\n    handleChange = (event) => {\n        this.setState({\n            unitType: event.target.value\n        })\n    }\n\n    updateValue = (type, content) => {\n        switch (type) {\n            case 'name':\n                this.setState({\n                    name: content\n                })\n                break\n            case 'qty':\n                this.setState({\n                    qty: content\n                })\n        }\n    }\n\n    clearForm = () => {\n        this.setState({\n            name: '',\n            qty: ''\n        })\n        this.props.getIngredients()\n        this.props.close()\n    }\n\n    sendIngredient = () => {\n        this.props.addIngredient(\n            {\n                name: this.state.name,\n                qty: this.state.qty\n            },\n            this.clearForm\n        )\n    }\n\n    saveIngredient = () => {\n        this.props.updateIngredient(\n            this.state.id,\n            {\n                id: this.state.id,\n                name: this.state.name,\n                qty: this.state.qty\n            },\n            this.clearForm\n        )\n    }\n\n    render() {\n        return (\n            <FormContainer>\n                <TextField\n                    id=\"outlined-basic\"\n                    label=\"Name\"\n                    variant=\"outlined\"\n                    value={this.state.name}\n                    onChange={(e) => {\n                        this.updateValue('name', e.target.value)\n                    }}\n                />\n                <TextField\n                    id=\"outlined-basic\"\n                    label=\"Quantity\"\n                    variant=\"outlined\"\n                    value={this.state.qty}\n                    onChange={(e) => {\n                        this.updateValue('qty', e.target.value)\n                    }}\n                />\n                {!this.props.preloaded && (\n                    <Button variant=\"outlined\" onClick={this.sendIngredient}>\n                        Add Ingredient\n                    </Button>\n                )}\n                {this.props.preloaded && (\n                    <Button variant=\"outlined\" onClick={this.saveIngredient}>\n                        Save\n                    </Button>\n                )}\n            </FormContainer>\n        )\n    }\n}\nexport default connect((state) => ({ ...state }), {\n    addIngredient,\n    getIngredients,\n    updateIngredient\n})(AddIngredientForm)\n","/Users/serban.movila/Desktop/FoodRecipes/frontend/src/Screens/Dashboard/Ingredients/Components/TableHeader.js",[],"/Users/serban.movila/Desktop/FoodRecipes/frontend/src/Screens/Dashboard/Ingredients/Components/Ingredient.js",["141","142"],"import styled from 'styled-components'\nimport EditIcon from '@material-ui/icons/Edit'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline'\nimport { IconButton } from '@material-ui/core'\n\nconst Row = styled.div`\n    display: flex;\n    flex-direction: row;\n    width: 100%;\n    position: relative;\n\n    & > button {\n        height: 45px !important;\n        width: 45px !important;\n        align-self: center;\n\n        &.delete-btn {\n            .delete-full {\n                display: none;\n                color: #ff5353;\n            }\n\n            &:hover {\n                .delete {\n                    display: none;\n                }\n                .delete-full {\n                    display: block;\n                }\n            }\n        }\n    }\n\n    &::after {\n        content: '';\n        height: 100%;\n        max-height: 1px;\n        background: #efeff7;\n        display: block;\n        position: absolute;\n        bottom: 0;\n        width: 96%;\n        left: 50%;\n        transform: translateX(-50%);\n    }\n`\n\nconst Cell = styled.div`\n    display: flex;\n    justify-content: start;\n    align-items: center;\n    text-align: left;\n    padding: 1.5% 2%;\n\n    &.ingredient-name {\n        width: 40%;\n        font-weight: 500;\n    }\n\n    &.ingredient-qty,\n    &.ingredient-unit,\n    &.ingredient-price {\n        width: 45%;\n        justify-content: center;\n    }\n`\n\nexport default function Ingredient(props) {\n    const { name, qty, unit, price, id } = props.data\n    return (\n        <Row>\n            <Cell className=\"ingredient-name\">{name}</Cell>\n            <Cell className=\"ingredient-qty\">{qty}</Cell>\n            <IconButton\n                aria-label=\"edit\"\n                className=\"edit-btn\"\n                onClick={() => {\n                    props.editIngredient(props.data)\n                }}\n            >\n                <EditIcon />\n            </IconButton>\n            <IconButton\n                aria-label=\"delete\"\n                className=\"delete-btn\"\n                onClick={() => {\n                    props.deleteIngredient(id)\n                }}\n            >\n                <DeleteIcon className=\"delete-full\" />\n                <DeleteOutlineIcon className=\"delete\" />\n            </IconButton>\n        </Row>\n    )\n}\n","/Users/serban.movila/Desktop/FoodRecipes/frontend/src/Screens/Dashboard/Recipes/Controllers/RecipeActions.js",[],"/Users/serban.movila/Desktop/FoodRecipes/frontend/src/Screens/Dashboard/Recipes/Components/Recipe.js",["143","144","145"],"import styled from 'styled-components'\nimport TimerIcon from '@material-ui/icons/Timer'\nimport LocalOfferIcon from '@material-ui/icons/LocalOffer'\n\nconst Box = styled.div`\n    border-radius: 8px;\n    display: flex;\n    flex-direction: column;\n    width: 31.3%;\n    margin: 1%;\n    background: white;\n    cursor: pointer;\n    overflow: hidden;\n\n    @media only screen and (max-width: 600px) {\n        width: 95%;\n        margin: 3% auto 3% auto;\n    }\n`\n\nconst BoxHeader = styled.div`\n    background: rgb(55, 59, 96);\n    padding: 3% 4%;\n\n    p {\n        color: white;\n        font-size: 90%;\n        font-weight: 500;\n        text-align: left;\n        margin: 0;\n    }\n`\n\nconst BoxContent = styled.div`\n    display: flex;\n    justify-content: space-around;\n    padding: 8% 5%;\n`\n\nconst InfoSection = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n    svg {\n        font-size: 200%;\n        color: rgba(55, 59, 96, 0.8);\n    }\n\n    .label {\n        font-weight: 700;\n        font-size: 70%;\n        margin-top: 5px;\n        color: rgba(0, 0, 0, 0.5);\n    }\n\n    .info {\n        font-size: 120%;\n        font-weight: 600;\n        margin: 0 auto;\n    }\n`\n\nexport default function Recipe(props) {\n    const { name, preparationTime, difficulty, price } = props.data\n    const { handleClick } = props\n\n    return (\n        <Box\n            onClick={props.handleClick}\n            style={\n                props.scoring\n                    ? {\n                          width: '100%'\n                      }\n                    : {}\n            }\n        >\n            <BoxHeader>\n                <p>{name}</p>\n            </BoxHeader>\n            <BoxContent\n                style={\n                    props.highlight == true\n                        ? {\n                              background: '#7D83B5'\n                          }\n                        : {}\n                }\n            >\n                <InfoSection>\n                    <TimerIcon />\n                    <p className=\"label\">TIME TO COOK</p>\n                    <p className=\"info\">{preparationTime} mins.</p>\n                </InfoSection>\n                <InfoSection>\n                    <LocalOfferIcon />\n                    <p className=\"label\">APPROX. COST</p>\n                    <p className=\"info\">{price} lei</p>\n                </InfoSection>\n            </BoxContent>\n        </Box>\n    )\n}\n","/Users/serban.movila/Desktop/FoodRecipes/frontend/src/Screens/Dashboard/Recipes/Components/AddRecipeForm.js",["146","147"],"import React from 'react'\nimport {\n    MenuItem,\n    Select,\n    Chip,\n    TextField,\n    Button,\n    FormControl,\n    InputLabel\n} from '@material-ui/core'\nimport {\n    addRecipe,\n    getRecipes,\n    saveRecipe,\n    deleteRecipe\n} from '../Controllers/RecipeActions'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\n\nconst FormContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 400px;\n    min-width: 300px;\n    max-height: 500px;\n    overflow-y: auto;\n    padding: 30px 20px;\n    background: white;\n    border-radius: 4px;\n\n    /* width */\n    &::-webkit-scrollbar {\n        width: 6px;\n    }\n\n    /* Track */\n    &::-webkit-scrollbar-track {\n        background: transparent;\n    }\n\n    /* Handle */\n    &::-webkit-scrollbar-thumb {\n        background: rgba(0, 0, 0, 0.3);\n        border-radius: 8px;\n    }\n\n    /* Handle on hover */\n    &::-webkit-scrollbar-thumb:hover {\n        background: rgba(0, 0, 0, 0.5);\n    }\n`\n\nexport const MealTypes = {\n    Starter: \"starter\",\n    Snack: \"snack\",\n    MainCourse: \"main course\",\n    Dessert: \"dessert\"\n}\n\nclass AddRecipeForm extends React.Component {\n    constructor(props) {\n        super(props)\n        if (this.props.preloaded) {\n            let {\n                name,\n                preparare,\n                recomandari,\n                ingredients,\n                tipPreparat,\n                price,\n                preparationTime,\n                _id\n            } = this.props.data\n\n            let names = []\n\n            ingredients.map((ingredient) => {\n                names.push(ingredient.name)\n            })\n\n            this.state = {\n                id: _id,\n                ingredients: names,\n                qtys: ingredients,\n                types: '',\n                name: name,\n                type: tipPreparat,\n                preparare: preparare,\n                price: price,\n                recomandare: recomandari,\n                preparationTime: preparationTime\n            }\n        } else\n            this.state = {\n                ingredients: [],\n                qtys: [],\n                types: '',\n                name: '',\n                type: '',\n                price: 0,\n                preparare: '',\n                recomandare: '',\n                preparationTime: ''\n            }\n    }\n\n    updateValue = (type, content) => {\n        switch (type) {\n            case 'preparationTime':\n                this.setState({\n                    preparationTime: content\n                })\n                break\n            case 'name':\n                this.setState({\n                    name: content\n                })\n                break\n            case 'preparare':\n                this.setState({\n                    preparare: content\n                })\n                break\n            case 'type':\n                this.setState({\n                    type: content\n                })\n                break\n            case 'recomandare':\n                this.setState({\n                    recomandare: content\n                })\n        }\n    }\n\n    clearForm = () => {\n        this.setState({\n            unitType: '',\n            ingredients: [],\n            qtys: [],\n            types: '',\n            name: '',\n            type: '',\n            preparare: '',\n            recomandare: '',\n            price: 0\n        })\n        this.props.getRecipes()\n        this.props.close()\n    }\n\n    sendRecipe = () => {\n        this.props.addRecipe(\n            {\n                name: this.state.name,\n                ingredients: this.state.qtys,\n                preparare: this.state.preparare,\n                tipPreparat: this.state.type,\n                recomandari: this.state.recomandare,\n                price: this.state.price,\n                preparationTime: this.state.preparationTime\n            },\n            this.clearForm\n        )\n    }\n\n    deleteRecipe = () => {\n        this.props.deleteRecipe(this.state.id, this.clearForm)\n    }\n\n    saveRecipe = () => {\n        this.props.saveRecipe(\n            this.state.id,\n            {\n                name: this.state.name,\n                ingredients: this.state.qtys,\n                preparare: this.state.preparare,\n                tipPreparat: this.state.type,\n                recomandari: this.state.recomandare,\n                price: this.state.price\n            },\n            this.clearForm\n        )\n    }\n\n    handleIngredientsChange = (e) => {\n        let newQtys = []\n\n        e.target.value.forEach((ingredient) => {\n            const obj = {\n                name: ingredient,\n                quantity: 1\n            }\n\n            let found = 0\n\n            this.state.qtys.forEach((qty) => {\n                if (qty.name === ingredient) {\n                    newQtys.push(qty)\n                    found = 1\n                }\n            })\n\n            if (!found) newQtys.push(obj)\n        })\n\n        this.setState({\n            ingredients: e.target.value,\n            qtys: newQtys\n        })\n    }\n\n    updateIngredientQty = (ingredient, value) => {\n        let qtys = this.state.qtys\n\n        for (let i = 0; i < qtys.length; i++) {\n            if (qtys[i].name === ingredient) {\n                qtys[i].quantity = value\n            }\n        }\n\n        this.setState({\n            qtys: qtys\n        })\n    }\n\n    render() {\n        const { ingredients } = this.props\n        return (\n            <FormContainer>\n                <TextField\n                    id=\"outlined-basic\"\n                    label=\"Name\"\n                    variant=\"outlined\"\n                    value={this.state.name}\n                    onChange={(e) => {\n                        this.updateValue('name', e.target.value)\n                    }}\n                    style={{\n                        marginBottom: '20px'\n                    }}\n                />\n                <FormControl variant=\"outlined\">\n                    <InputLabel id=\"demo-simple-select-outlined-label\">\n                        Ingredients\n                    </InputLabel>\n                    <Select\n                        label=\"Ingredients\"\n                        variant=\"outlined\"\n                        multiple\n                        onChange={this.handleIngredientsChange}\n                        renderValue={(selected) => (\n                            <div>\n                                {selected.map((value) => (\n                                    <Chip key={value} label={value} />\n                                ))}\n                            </div>\n                        )}\n                        value={this.state.ingredients}\n                        style={{\n                            marginBottom: '20px'\n                        }}\n                    >\n                        {ingredients.map((ingredient) => {\n                            return (\n                                <MenuItem\n                                    key={ingredient.id}\n                                    value={ingredient.name}\n                                    selected={\n                                        this.state.ingredients.indexOf(\n                                            ingredient.name\n                                        ) !== -1\n                                            ? true\n                                            : false\n                                    }\n                                >\n                                    {ingredient.name}\n                                </MenuItem>\n                            )\n                        })}\n                    </Select>\n                </FormControl>\n                <TextField\n                    id=\"outlined-basic\"\n                    variant=\"outlined\"\n                    label=\"Preparation time (in minutes)\"\n                    placeholder=\"60\"\n                    type=\"number\"\n                    value={this.state.preparationTime}\n                    onChange={(e) => {\n                        this.updateValue('preparationTime', e.target.value)\n                    }}\n                    style={{\n                        marginBottom: '20px'\n                    }}\n                />\n                {this.state.qtys.map((qty) => {\n                    return (\n                        <TextField\n                            id=\"outlined-basic\"\n                            label={qty.name}\n                            variant=\"outlined\"\n                            placeholder=\"Quantity\"\n                            value={qty.quantity}\n                            type=\"number\"\n                            onChange={(e) => {\n                                this.updateIngredientQty(\n                                    qty.name,\n                                    e.target.value\n                                )\n                            }}\n                            style={{\n                                marginBottom: '20px'\n                            }}\n                        />\n                    )\n                })}\n                <FormControl variant=\"outlined\">\n                    <InputLabel id=\"demo-simple-select-outlined-label\">\n                        Recipe type\n                    </InputLabel>\n                    <Select\n                        label=\"Recipe type\"\n                        variant=\"outlined\"\n                        onChange={(e) => {\n                            this.updateValue('type', e.target.value)\n                        }}\n                        value={this.state.type}\n                        style={{\n                            marginBottom: '20px'\n                        }}\n                    >\n                        <MenuItem\n                            value={MealTypes.Snack}\n                            selected={\n                                this.state.types === MealTypes.Snack\n                            }\n                        >\n                            Snack\n                        </MenuItem>\n                        <MenuItem\n                            value={MealTypes.Starter}\n                            selected={\n                                this.state.types === MealTypes.Starter\n                            }\n                        >\n                            Starter\n                        </MenuItem>\n                        <MenuItem\n                            value={MealTypes.MainCourse}\n                            selected={\n                                this.state.types === MealTypes.MainCourse\n                            }\n                        >\n                            Main Course\n                        </MenuItem>\n                        <MenuItem\n                            value={MealTypes.Dessert}\n                            selected={\n                                this.state.types === MealTypes.Dessert\n                            }\n                        >\n                            Dessert\n                        </MenuItem>\n                    </Select>\n                </FormControl>\n                <TextField\n                    id=\"outlined-basic\"\n                    label=\"Price\"\n                    variant=\"outlined\"\n                    placeholder=\"Price\"\n                    type=\"number\"\n                    value={this.state.price}\n                    onChange={(e) => {\n                        this.setState({\n                            price: e.target.value\n                        })\n                    }}\n                    style={{\n                        marginBottom: '20px'\n                    }}\n                />\n                <TextField\n                    id=\"outlined-basic\"\n                    label=\"Cooking\"\n                    variant=\"outlined\"\n                    value={this.state.preparare}\n                    onChange={(e) => {\n                        this.updateValue('preparare', e.target.value)\n                    }}\n                    style={{\n                        marginBottom: '20px'\n                    }}\n                    multiline\n                />\n                <TextField\n                    id=\"outlined-basic\"\n                    label=\"Recommendations\"\n                    variant=\"outlined\"\n                    value={this.state.recomandare}\n                    onChange={(e) => {\n                        this.updateValue('recomandare', e.target.value)\n                    }}\n                    style={{\n                        marginBottom: '20px'\n                    }}\n                    multiline\n                />\n                {!this.props.preloaded && (\n                    <Button variant=\"outlined\" onClick={this.sendRecipe}>\n                        Add Recipe\n                    </Button>\n                )}\n                {this.props.preloaded && (\n                    <>\n                        <Button variant=\"outlined\" onClick={this.saveRecipe}>\n                            Save\n                        </Button>\n                        <Button\n                            variant=\"outlined\"\n                            style={{\n                                marginTop: '10px'\n                            }}\n                            onClick={this.deleteRecipe}\n                        >\n                            Delete\n                        </Button>\n                    </>\n                )}\n            </FormContainer>\n        )\n    }\n}\nexport default connect((state) => ({ ...state }), {\n    addRecipe,\n    getRecipes,\n    saveRecipe,\n    deleteRecipe\n})(AddRecipeForm)\n","/Users/serban.movila/Desktop/FoodRecipes/frontend/src/Screens/Dashboard/Recommendations/Components/PickMeal.js",[],"/Users/serban.movila/Desktop/FoodRecipes/frontend/src/Screens/Dashboard/Recommendations/Components/PickRecipes.js",["148"],"import React from 'react'\nimport Recipe from '../../Recipes/Components/Recipe'\nimport {connect} from 'react-redux'\nimport styled from \"styled-components\";\n\nconst RecipesListing = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  max-height: 80%;\n  width: 100%;\n  overflow: auto;\n  align-self: flex-end;\n  /* width */\n\n  &::-webkit-scrollbar {\n    width: 6px;\n  }\n\n  /* Track */\n\n  &::-webkit-scrollbar-track {\n    background: transparent;\n  }\n\n  /* Handle */\n\n  &::-webkit-scrollbar-thumb {\n    background: rgba(0, 0, 0, 0.3);\n    border-radius: 8px;\n  }\n\n  /* Handle on hover */\n\n  &::-webkit-scrollbar-thumb:hover {\n    background: rgba(0, 0, 0, 0.5);\n  }\n`\n\nclass PickRecipes extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            choices: []\n        }\n    }\n\n    componentDidMount() {\n        const c = [];\n\n        this.props.recipes.map(recipe => {\n            recipe.selected = false;\n            if (recipe.tipPreparat.toLowerCase() === this.props.type.toLowerCase()) c.push(recipe)\n        })\n\n        this.setState({\n            choices: c\n        });\n    }\n\n    select = (recipe) => {\n        const c = this.state.choices;\n\n        const n = c.filter(recipe => recipe.selected).length\n\n        if (n < 3 || (n >= 3 && c[c.indexOf(recipe)].selected === true)) {\n            c[c.indexOf(recipe)].selected = !c[c.indexOf(recipe)].selected;\n\n            this.setState({\n                choices: c\n            }, () => {\n                this.props.setSelection(this.state.choices.filter(recipe => recipe.selected))\n            })\n        }\n    }\n\n    render() {\n        return (\n            <RecipesListing>\n                {this.state.choices.map(recipe => {\n                    return <Recipe highlight={recipe.selected} handleClick={() => {\n                        this.select(recipe)\n                    }} data={recipe}/>\n                })}\n            </RecipesListing>\n        )\n    }\n}\n\nexport default connect(\n    (state) => ({\n        recipes: state.recipes\n    }),\n    {}\n)(PickRecipes)\n","/Users/serban.movila/Desktop/FoodRecipes/frontend/src/Screens/Dashboard/Recommendations/Components/ScoreRecipes.js",[],{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","severity":1,"message":"154","line":2,"column":50,"nodeType":"155","messageId":"156","endLine":2,"endColumn":54},{"ruleId":"153","severity":1,"message":"157","line":4,"column":17,"nodeType":"155","messageId":"156","endLine":4,"endColumn":25},{"ruleId":"158","severity":1,"message":"159","line":11,"column":8,"nodeType":"160","endLine":11,"endColumn":10,"suggestions":"161"},{"ruleId":"153","severity":1,"message":"162","line":1,"column":10,"nodeType":"155","messageId":"156","endLine":1,"endColumn":29},{"ruleId":"153","severity":1,"message":"163","line":2,"column":10,"nodeType":"155","messageId":"156","endLine":2,"endColumn":24},{"ruleId":"153","severity":1,"message":"164","line":5,"column":10,"nodeType":"155","messageId":"156","endLine":5,"endColumn":20},{"ruleId":"165","severity":1,"message":"166","line":155,"column":9,"nodeType":"167","messageId":"168","endLine":181,"endColumn":10},{"ruleId":"169","severity":1,"message":"170","line":157,"column":17,"nodeType":"171","messageId":"172","endLine":164,"endColumn":18},{"ruleId":"169","severity":1,"message":"170","line":167,"column":17,"nodeType":"171","messageId":"172","endLine":174,"endColumn":18},{"ruleId":"153","severity":1,"message":"173","line":14,"column":5,"nodeType":"155","messageId":"156","endLine":14,"endColumn":21},{"ruleId":"153","severity":1,"message":"174","line":130,"column":7,"nodeType":"155","messageId":"156","endLine":130,"endColumn":14},{"ruleId":"153","severity":1,"message":"175","line":11,"column":10,"nodeType":"155","messageId":"156","endLine":11,"endColumn":38},{"ruleId":"153","severity":1,"message":"176","line":11,"column":40,"nodeType":"155","messageId":"156","endLine":11,"endColumn":50},{"ruleId":"153","severity":1,"message":"154","line":3,"column":10,"nodeType":"155","messageId":"156","endLine":3,"endColumn":14},{"ruleId":"177","severity":1,"message":"178","line":93,"column":25,"nodeType":"179","endLine":98,"endColumn":26},{"ruleId":"180","severity":1,"message":"181","line":94,"column":34,"nodeType":"182","messageId":"183","endLine":94,"endColumn":54},{"ruleId":"177","severity":1,"message":"178","line":103,"column":25,"nodeType":"179","endLine":108,"endColumn":26},{"ruleId":"180","severity":1,"message":"181","line":104,"column":34,"nodeType":"182","messageId":"183","endLine":104,"endColumn":54},{"ruleId":"153","severity":1,"message":"184","line":3,"column":5,"nodeType":"155","messageId":"156","endLine":3,"endColumn":15},{"ruleId":"153","severity":1,"message":"185","line":4,"column":5,"nodeType":"155","messageId":"156","endLine":4,"endColumn":11},{"ruleId":"153","severity":1,"message":"186","line":5,"column":5,"nodeType":"155","messageId":"156","endLine":5,"endColumn":13},{"ruleId":"153","severity":1,"message":"187","line":6,"column":5,"nodeType":"155","messageId":"156","endLine":6,"endColumn":16},{"ruleId":"165","severity":1,"message":"166","line":53,"column":9,"nodeType":"167","messageId":"168","endLine":63,"endColumn":10},{"ruleId":"153","severity":1,"message":"188","line":70,"column":24,"nodeType":"155","messageId":"156","endLine":70,"endColumn":28},{"ruleId":"153","severity":1,"message":"189","line":70,"column":30,"nodeType":"155","messageId":"156","endLine":70,"endColumn":35},{"ruleId":"153","severity":1,"message":"190","line":65,"column":36,"nodeType":"155","messageId":"156","endLine":65,"endColumn":46},{"ruleId":"153","severity":1,"message":"191","line":66,"column":13,"nodeType":"155","messageId":"156","endLine":66,"endColumn":24},{"ruleId":"192","severity":1,"message":"193","line":84,"column":37,"nodeType":"194","messageId":"195","endLine":84,"endColumn":39},{"ruleId":"196","severity":1,"message":"197","line":77,"column":42,"nodeType":"198","messageId":"199","endLine":77,"endColumn":44},{"ruleId":"165","severity":1,"message":"166","line":108,"column":9,"nodeType":"167","messageId":"168","endLine":133,"endColumn":10},{"ruleId":"196","severity":1,"message":"197","line":52,"column":39,"nodeType":"198","messageId":"199","endLine":52,"endColumn":41},"no-native-reassign",["200"],"no-negated-in-lhs",["201"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["202"],"'CallToActionRounded' is defined but never used.","'getIngredients' is defined but never used.","'checkLogin' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'updateIngredient' is defined but never used.","'MenuBtn' is assigned a value but never used.","'FormatListNumberedRtlRounded' is defined but never used.","'ThreeSixty' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-script-url","Script URL is a form of eval.","Literal","unexpectedScriptURL","'InputLabel' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'FormControl' is defined but never used.","'unit' is assigned a value but never used.","'price' is assigned a value but never used.","'difficulty' is assigned a value but never used.","'handleClick' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation",{"desc":"203","fix":"204"},"Update the dependencies array to be: [props]",{"range":"205","text":"206"},[398,400],"[props]"]